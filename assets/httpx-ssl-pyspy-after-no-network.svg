<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="362" onload="init(evt)" viewBox="0 0 1200 362" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="362" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">./.venv/bin/py-spy record --pid 15876 --output fixed-day-5.svg</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="351.00"> </text><svg id="frames" x="10" width="1180" total_samples="187"><g><title>_run_once (asyncio/base_events.py:1879) (1 samples, 0.53%)</title><rect x="0.0000%" y="132" width="0.5348%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="142.50"></text></g><g><title>_run_once (asyncio/base_events.py:1881) (2 samples, 1.07%)</title><rect x="0.5348%" y="132" width="1.0695%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.7848%" y="142.50"></text></g><g><title>acquire_nowait (anyio/_core/_synchronization.py:154) (1 samples, 0.53%)</title><rect x="3.2086%" y="276" width="0.5348%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="3.4586%" y="286.50"></text></g><g><title>get_current_task (anyio/_core/_testing.py:64) (1 samples, 0.53%)</title><rect x="3.2086%" y="292" width="0.5348%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="3.4586%" y="302.50"></text></g><g><title>get_asynclib (anyio/_core/_eventloop.py:151) (1 samples, 0.53%)</title><rect x="3.2086%" y="308" width="0.5348%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="3.4586%" y="318.50"></text></g><g><title>acquire (anyio/_core/_synchronization.py:123) (3 samples, 1.60%)</title><rect x="3.2086%" y="260" width="1.6043%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="3"/><text x="3.4586%" y="270.50"></text></g><g><title>acquire_nowait (anyio/_core/_synchronization.py:155) (2 samples, 1.07%)</title><rect x="3.7433%" y="276" width="1.0695%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="3.9933%" y="286.50"></text></g><g><title>__eq__ (anyio/_core/_testing.py:35) (2 samples, 1.07%)</title><rect x="3.7433%" y="292" width="1.0695%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="2"/><text x="3.9933%" y="302.50"></text></g><g><title>__exit__ (anyio/_backends/_asyncio.py:357) (1 samples, 0.53%)</title><rect x="4.8128%" y="308" width="0.5348%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="5.0628%" y="318.50"></text></g><g><title>current_task (asyncio/tasks.py:37) (1 samples, 0.53%)</title><rect x="4.8128%" y="324" width="0.5348%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="1"/><text x="5.0628%" y="334.50"></text></g><g><title>__aenter__ (httpcore/_synchronization.py:15) (6 samples, 3.21%)</title><rect x="3.2086%" y="244" width="3.2086%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="6"/><text x="3.4586%" y="254.50">__a..</text></g><g><title>acquire (anyio/_core/_synchronization.py:142) (3 samples, 1.60%)</title><rect x="4.8128%" y="260" width="1.6043%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="3"/><text x="5.0628%" y="270.50"></text></g><g><title>cancel_shielded_checkpoint (anyio/lowlevel.py:57) (3 samples, 1.60%)</title><rect x="4.8128%" y="276" width="1.6043%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="3"/><text x="5.0628%" y="286.50"></text></g><g><title>cancel_shielded_checkpoint (anyio/_backends/_asyncio.py:538) (3 samples, 1.60%)</title><rect x="4.8128%" y="292" width="1.6043%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="3"/><text x="5.0628%" y="302.50"></text></g><g><title>__exit__ (anyio/_backends/_asyncio.py:371) (2 samples, 1.07%)</title><rect x="5.3476%" y="308" width="1.0695%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="2"/><text x="5.5976%" y="318.50"></text></g><g><title>__aexit__ (httpx/_client.py:1997) (8 samples, 4.28%)</title><rect x="2.6738%" y="180" width="4.2781%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="8"/><text x="2.9238%" y="190.50">__aex..</text></g><g><title>__aexit__ (httpx/_transports/default.py:332) (8 samples, 4.28%)</title><rect x="2.6738%" y="196" width="4.2781%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="8"/><text x="2.9238%" y="206.50">__aex..</text></g><g><title>__aexit__ (httpcore/_async/connection_pool.py:326) (8 samples, 4.28%)</title><rect x="2.6738%" y="212" width="4.2781%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="8"/><text x="2.9238%" y="222.50">__aex..</text></g><g><title>aclose (httpcore/_async/connection_pool.py:303) (8 samples, 4.28%)</title><rect x="2.6738%" y="228" width="4.2781%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="8"/><text x="2.9238%" y="238.50">aclos..</text></g><g><title>__aexit__ (httpcore/_synchronization.py:24) (1 samples, 0.53%)</title><rect x="6.4171%" y="244" width="0.5348%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="6.6671%" y="254.50"></text></g><g><title>release (anyio/_core/_synchronization.py:165) (1 samples, 0.53%)</title><rect x="6.4171%" y="260" width="0.5348%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="1"/><text x="6.6671%" y="270.50"></text></g><g><title>get_current_task (anyio/_core/_testing.py:64) (1 samples, 0.53%)</title><rect x="6.4171%" y="276" width="0.5348%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="1"/><text x="6.6671%" y="286.50"></text></g><g><title>encode (rfc3986/iri.py:156) (1 samples, 0.53%)</title><rect x="8.5561%" y="228" width="0.5348%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="1"/><text x="8.8061%" y="238.50"></text></g><g><title>from_string (rfc3986/iri.py:94) (1 samples, 0.53%)</title><rect x="9.0909%" y="244" width="0.5348%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="1"/><text x="9.3409%" y="254.50"></text></g><g><title>encode_component (rfc3986/normalizers.py:152) (1 samples, 0.53%)</title><rect x="9.6257%" y="260" width="0.5348%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="1"/><text x="9.8757%" y="270.50"></text></g><g><title>encode_component (rfc3986/normalizers.py:156) (1 samples, 0.53%)</title><rect x="10.1604%" y="260" width="0.5348%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="1"/><text x="10.4104%" y="270.50"></text></g><g><title>to_bytes (rfc3986/compat.py:59) (1 samples, 0.53%)</title><rect x="10.1604%" y="276" width="0.5348%" height="15" fill="rgb(225,111,53)" fg:x="19" fg:w="1"/><text x="10.4104%" y="286.50"></text></g><g><title>__init__ (httpx/_client.py:175) (7 samples, 3.74%)</title><rect x="7.4866%" y="196" width="3.7433%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="7"/><text x="7.7366%" y="206.50">__in..</text></g><g><title>__init__ (httpx/_urls.py:91) (5 samples, 2.67%)</title><rect x="8.5561%" y="212" width="2.6738%" height="15" fill="rgb(214,148,48)" fg:x="16" fg:w="5"/><text x="8.8061%" y="222.50">__..</text></g><g><title>iri_reference (rfc3986/api.py:52) (4 samples, 2.14%)</title><rect x="9.0909%" y="228" width="2.1390%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="4"/><text x="9.3409%" y="238.50">i..</text></g><g><title>from_string (rfc3986/iri.py:97) (3 samples, 1.60%)</title><rect x="9.6257%" y="244" width="1.6043%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="3"/><text x="9.8757%" y="254.50"></text></g><g><title>encode_component (rfc3986/normalizers.py:157) (1 samples, 0.53%)</title><rect x="10.6952%" y="260" width="0.5348%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="1"/><text x="10.9452%" y="270.50"></text></g><g><title>parse_qsl (urllib/parse.py:743) (5 samples, 2.67%)</title><rect x="12.2995%" y="244" width="2.6738%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="5"/><text x="12.5495%" y="254.50">pa..</text></g><g><title>_coerce_args (urllib/parse.py:128) (5 samples, 2.67%)</title><rect x="12.2995%" y="260" width="2.6738%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="5"/><text x="12.5495%" y="270.50">_c..</text></g><g><title>_decode_args (urllib/parse.py:112) (4 samples, 2.14%)</title><rect x="12.8342%" y="276" width="2.1390%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="4"/><text x="13.0842%" y="286.50">_..</text></g><g><title>&lt;genexpr&gt; (urllib/parse.py:112) (1 samples, 0.53%)</title><rect x="14.4385%" y="292" width="0.5348%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="14.6885%" y="302.50"></text></g><g><title>__init__ (httpx/_client.py:178) (8 samples, 4.28%)</title><rect x="11.2299%" y="196" width="4.2781%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="8"/><text x="11.4799%" y="206.50">__ini..</text></g><g><title>__init__ (httpx/_urls.py:571) (8 samples, 4.28%)</title><rect x="11.2299%" y="212" width="4.2781%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="8"/><text x="11.4799%" y="222.50">__ini..</text></g><g><title>parse_qs (urllib/parse.py:703) (7 samples, 3.74%)</title><rect x="11.7647%" y="228" width="3.7433%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="7"/><text x="12.0147%" y="238.50">pars..</text></g><g><title>parse_qsl (urllib/parse.py:744) (1 samples, 0.53%)</title><rect x="14.9733%" y="244" width="0.5348%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="15.2233%" y="254.50"></text></g><g><title>_coerce_args (urllib/parse.py:127) (1 samples, 0.53%)</title><rect x="14.9733%" y="260" width="0.5348%" height="15" fill="rgb(231,60,39)" fg:x="28" fg:w="1"/><text x="15.2233%" y="270.50"></text></g><g><title>__init__ (httpx/_models.py:66) (1 samples, 0.53%)</title><rect x="16.5775%" y="228" width="0.5348%" height="15" fill="rgb(208,69,12)" fg:x="31" fg:w="1"/><text x="16.8275%" y="238.50"></text></g><g><title>__instancecheck__ (abc.py:119) (1 samples, 0.53%)</title><rect x="16.5775%" y="244" width="0.5348%" height="15" fill="rgb(235,93,37)" fg:x="31" fg:w="1"/><text x="16.8275%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (httpx/_models.py:69) (2 samples, 1.07%)</title><rect x="17.1123%" y="244" width="1.0695%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="2"/><text x="17.3623%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (httpx/_models.py:70) (1 samples, 0.53%)</title><rect x="18.1818%" y="244" width="0.5348%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="1"/><text x="18.4318%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (httpx/_models.py:71) (1 samples, 0.53%)</title><rect x="18.7166%" y="244" width="0.5348%" height="15" fill="rgb(206,96,30)" fg:x="35" fg:w="1"/><text x="18.9666%" y="254.50"></text></g><g><title>normalize_header_key (httpx/_utils.py:38) (1 samples, 0.53%)</title><rect x="18.7166%" y="260" width="0.5348%" height="15" fill="rgb(218,138,4)" fg:x="35" fg:w="1"/><text x="18.9666%" y="270.50"></text></g><g><title>normalize_header_key (httpx/_utils.py:38) (1 samples, 0.53%)</title><rect x="19.2513%" y="260" width="0.5348%" height="15" fill="rgb(250,191,14)" fg:x="36" fg:w="1"/><text x="19.5013%" y="270.50"></text></g><g><title>&lt;listcomp&gt; (httpx/_models.py:72) (2 samples, 1.07%)</title><rect x="19.2513%" y="244" width="1.0695%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="2"/><text x="19.5013%" y="254.50"></text></g><g><title>normalize_header_key (httpx/_utils.py:43) (1 samples, 0.53%)</title><rect x="19.7861%" y="260" width="0.5348%" height="15" fill="rgb(206,27,48)" fg:x="37" fg:w="1"/><text x="20.0361%" y="270.50"></text></g><g><title>headers (httpx/_client.py:285) (9 samples, 4.81%)</title><rect x="16.0428%" y="212" width="4.8128%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="9"/><text x="16.2928%" y="222.50">header..</text></g><g><title>__init__ (httpx/_models.py:69) (7 samples, 3.74%)</title><rect x="17.1123%" y="228" width="3.7433%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="7"/><text x="17.3623%" y="238.50">__in..</text></g><g><title>&lt;listcomp&gt; (httpx/_models.py:73) (1 samples, 0.53%)</title><rect x="20.3209%" y="244" width="0.5348%" height="15" fill="rgb(247,123,22)" fg:x="38" fg:w="1"/><text x="20.5709%" y="254.50"></text></g><g><title>headers (httpx/_client.py:286) (1 samples, 0.53%)</title><rect x="20.8556%" y="212" width="0.5348%" height="15" fill="rgb(231,138,38)" fg:x="39" fg:w="1"/><text x="21.1056%" y="222.50"></text></g><g><title>__init__ (httpx/_client.py:179) (12 samples, 6.42%)</title><rect x="15.5080%" y="196" width="6.4171%" height="15" fill="rgb(231,145,46)" fg:x="29" fg:w="12"/><text x="15.7580%" y="206.50">__init__..</text></g><g><title>headers (httpx/_client.py:293) (1 samples, 0.53%)</title><rect x="21.3904%" y="212" width="0.5348%" height="15" fill="rgb(251,118,11)" fg:x="40" fg:w="1"/><text x="21.6404%" y="222.50"></text></g><g><title>update (httpx/_models.py:202) (1 samples, 0.53%)</title><rect x="21.3904%" y="228" width="0.5348%" height="15" fill="rgb(217,147,25)" fg:x="40" fg:w="1"/><text x="21.6404%" y="238.50"></text></g><g><title>__init__ (httpx/_client.py:180) (1 samples, 0.53%)</title><rect x="21.9251%" y="196" width="0.5348%" height="15" fill="rgb(247,81,37)" fg:x="41" fg:w="1"/><text x="22.1751%" y="206.50"></text></g><g><title>__init__ (httpx/_models.py:1004) (1 samples, 0.53%)</title><rect x="21.9251%" y="212" width="0.5348%" height="15" fill="rgb(209,12,38)" fg:x="41" fg:w="1"/><text x="22.1751%" y="222.50"></text></g><g><title>__init__ (httpx/_client.py:181) (3 samples, 1.60%)</title><rect x="22.4599%" y="196" width="1.6043%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="3"/><text x="22.7099%" y="206.50"></text></g><g><title>__init__ (httpx/_config.py:230) (1 samples, 0.53%)</title><rect x="23.5294%" y="212" width="0.5348%" height="15" fill="rgb(248,47,43)" fg:x="44" fg:w="1"/><text x="23.7794%" y="222.50"></text></g><g><title>__init__ (httpx/_client.py:185) (1 samples, 0.53%)</title><rect x="24.0642%" y="196" width="0.5348%" height="15" fill="rgb(221,10,30)" fg:x="45" fg:w="1"/><text x="24.3142%" y="206.50"></text></g><g><title>get (_collections_abc.py:818) (1 samples, 0.53%)</title><rect x="25.1337%" y="244" width="0.5348%" height="15" fill="rgb(210,229,1)" fg:x="47" fg:w="1"/><text x="25.3837%" y="254.50"></text></g><g><title>encode (os.py:755) (1 samples, 0.53%)</title><rect x="27.8075%" y="276" width="0.5348%" height="15" fill="rgb(222,148,37)" fg:x="52" fg:w="1"/><text x="28.0575%" y="286.50"></text></g><g><title>get (_collections_abc.py:819) (7 samples, 3.74%)</title><rect x="25.6684%" y="244" width="3.7433%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="7"/><text x="25.9184%" y="254.50">get ..</text></g><g><title>__getitem__ (os.py:676) (4 samples, 2.14%)</title><rect x="27.2727%" y="260" width="2.1390%" height="15" fill="rgb(247,98,35)" fg:x="51" fg:w="4"/><text x="27.5227%" y="270.50">_..</text></g><g><title>encode (os.py:757) (2 samples, 1.07%)</title><rect x="28.3422%" y="276" width="1.0695%" height="15" fill="rgb(247,138,52)" fg:x="53" fg:w="2"/><text x="28.5922%" y="286.50"></text></g><g><title>__init__ (httpx/_client.py:1368) (43 samples, 22.99%)</title><rect x="6.9519%" y="180" width="22.9947%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="43"/><text x="7.2019%" y="190.50">__init__ (httpx/_client.py:1368)</text></g><g><title>__init__ (httpx/_client.py:190) (10 samples, 5.35%)</title><rect x="24.5989%" y="196" width="5.3476%" height="15" fill="rgb(246,177,23)" fg:x="46" fg:w="10"/><text x="24.8489%" y="206.50">__init_..</text></g><g><title>__init__ (httpx/_utils.py:135) (9 samples, 4.81%)</title><rect x="25.1337%" y="212" width="4.8128%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="9"/><text x="25.3837%" y="222.50">__init..</text></g><g><title>getenv (os.py:775) (9 samples, 4.81%)</title><rect x="25.1337%" y="228" width="4.8128%" height="15" fill="rgb(216,154,8)" fg:x="47" fg:w="9"/><text x="25.3837%" y="238.50">getenv..</text></g><g><title>get (_collections_abc.py:821) (1 samples, 0.53%)</title><rect x="29.4118%" y="244" width="0.5348%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="1"/><text x="29.6618%" y="254.50"></text></g><g><title>__init__ (httpx/_client.py:1391) (2 samples, 1.07%)</title><rect x="29.9465%" y="180" width="1.0695%" height="15" fill="rgb(251,115,12)" fg:x="56" fg:w="2"/><text x="30.1965%" y="190.50"></text></g><g><title>_get_proxy_map (httpx/_client.py:214) (1 samples, 0.53%)</title><rect x="31.0160%" y="196" width="0.5348%" height="15" fill="rgb(240,54,50)" fg:x="58" fg:w="1"/><text x="31.2660%" y="206.50"></text></g><g><title>__iter__ (os.py:699) (2 samples, 1.07%)</title><rect x="34.7594%" y="276" width="1.0695%" height="15" fill="rgb(233,84,52)" fg:x="65" fg:w="2"/><text x="35.0094%" y="286.50"></text></g><g><title>__iter__ (_collections_abc.py:905) (13 samples, 6.95%)</title><rect x="34.2246%" y="260" width="6.9519%" height="15" fill="rgb(207,117,47)" fg:x="64" fg:w="13"/><text x="34.4746%" y="270.50">__iter__ ..</text></g><g><title>__iter__ (os.py:701) (10 samples, 5.35%)</title><rect x="35.8289%" y="276" width="5.3476%" height="15" fill="rgb(249,43,39)" fg:x="67" fg:w="10"/><text x="36.0789%" y="286.50">__iter_..</text></g><g><title>decode (os.py:759) (4 samples, 2.14%)</title><rect x="39.0374%" y="292" width="2.1390%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="4"/><text x="39.2874%" y="302.50">d..</text></g><g><title>__getitem__ (os.py:675) (2 samples, 1.07%)</title><rect x="45.4545%" y="276" width="1.0695%" height="15" fill="rgb(236,212,23)" fg:x="85" fg:w="2"/><text x="45.7045%" y="286.50"></text></g><g><title>encode (os.py:755) (4 samples, 2.14%)</title><rect x="50.2674%" y="292" width="2.1390%" height="15" fill="rgb(242,79,21)" fg:x="94" fg:w="4"/><text x="50.5174%" y="302.50">e..</text></g><g><title>__getitem__ (os.py:676) (14 samples, 7.49%)</title><rect x="46.5241%" y="276" width="7.4866%" height="15" fill="rgb(211,96,35)" fg:x="87" fg:w="14"/><text x="46.7741%" y="286.50">__getitem_..</text></g><g><title>encode (os.py:757) (3 samples, 1.60%)</title><rect x="52.4064%" y="292" width="1.6043%" height="15" fill="rgb(253,215,40)" fg:x="98" fg:w="3"/><text x="52.6564%" y="302.50"></text></g><g><title>__iter__ (_collections_abc.py:906) (35 samples, 18.72%)</title><rect x="41.1765%" y="260" width="18.7166%" height="15" fill="rgb(211,81,21)" fg:x="77" fg:w="35"/><text x="41.4265%" y="270.50">__iter__ (_collections_abc.py..</text></g><g><title>__getitem__ (os.py:680) (11 samples, 5.88%)</title><rect x="54.0107%" y="276" width="5.8824%" height="15" fill="rgb(208,190,38)" fg:x="101" fg:w="11"/><text x="54.2607%" y="286.50">__getit..</text></g><g><title>decode (os.py:759) (6 samples, 3.21%)</title><rect x="56.6845%" y="292" width="3.2086%" height="15" fill="rgb(235,213,38)" fg:x="106" fg:w="6"/><text x="56.9345%" y="302.50">dec..</text></g><g><title>getproxies_environment (urllib/request.py:2500) (52 samples, 27.81%)</title><rect x="32.6203%" y="244" width="27.8075%" height="15" fill="rgb(237,122,38)" fg:x="61" fg:w="52"/><text x="32.8703%" y="254.50">getproxies_environment (urllib/request.py:250..</text></g><g><title>items (_collections_abc.py:837) (1 samples, 0.53%)</title><rect x="59.8930%" y="260" width="0.5348%" height="15" fill="rgb(244,218,35)" fg:x="112" fg:w="1"/><text x="60.1430%" y="270.50"></text></g><g><title>getproxies_environment (urllib/request.py:2501) (7 samples, 3.74%)</title><rect x="60.4278%" y="244" width="3.7433%" height="15" fill="rgb(240,68,47)" fg:x="113" fg:w="7"/><text x="60.6778%" y="254.50">getp..</text></g><g><title>getproxies_environment (urllib/request.py:2502) (6 samples, 3.21%)</title><rect x="64.1711%" y="244" width="3.2086%" height="15" fill="rgb(210,16,53)" fg:x="120" fg:w="6"/><text x="64.4211%" y="254.50">get..</text></g><g><title>__iter__ (_collections_abc.py:905) (5 samples, 2.67%)</title><rect x="68.4492%" y="260" width="2.6738%" height="15" fill="rgb(235,124,12)" fg:x="128" fg:w="5"/><text x="68.6992%" y="270.50">__..</text></g><g><title>__iter__ (os.py:701) (5 samples, 2.67%)</title><rect x="68.4492%" y="276" width="2.6738%" height="15" fill="rgb(224,169,11)" fg:x="128" fg:w="5"/><text x="68.6992%" y="286.50">__..</text></g><g><title>decode (os.py:759) (1 samples, 0.53%)</title><rect x="70.5882%" y="292" width="0.5348%" height="15" fill="rgb(250,166,2)" fg:x="132" fg:w="1"/><text x="70.8382%" y="302.50"></text></g><g><title>encode (os.py:755) (1 samples, 0.53%)</title><rect x="75.9358%" y="292" width="0.5348%" height="15" fill="rgb(242,216,29)" fg:x="142" fg:w="1"/><text x="76.1858%" y="302.50"></text></g><g><title>__getitem__ (os.py:676) (11 samples, 5.88%)</title><rect x="72.1925%" y="276" width="5.8824%" height="15" fill="rgb(230,116,27)" fg:x="135" fg:w="11"/><text x="72.4425%" y="286.50">__getit..</text></g><g><title>encode (os.py:757) (3 samples, 1.60%)</title><rect x="76.4706%" y="292" width="1.6043%" height="15" fill="rgb(228,99,48)" fg:x="143" fg:w="3"/><text x="76.7206%" y="302.50"></text></g><g><title>getproxies_environment (urllib/request.py:2510) (26 samples, 13.90%)</title><rect x="67.3797%" y="244" width="13.9037%" height="15" fill="rgb(253,11,6)" fg:x="126" fg:w="26"/><text x="67.6297%" y="254.50">getproxies_environmen..</text></g><g><title>__iter__ (_collections_abc.py:906) (19 samples, 10.16%)</title><rect x="71.1230%" y="260" width="10.1604%" height="15" fill="rgb(247,143,39)" fg:x="133" fg:w="19"/><text x="71.3730%" y="270.50">__iter__ (_coll..</text></g><g><title>__getitem__ (os.py:680) (6 samples, 3.21%)</title><rect x="78.0749%" y="276" width="3.2086%" height="15" fill="rgb(236,97,10)" fg:x="146" fg:w="6"/><text x="78.3249%" y="286.50">__g..</text></g><g><title>decode (os.py:759) (1 samples, 0.53%)</title><rect x="80.7487%" y="292" width="0.5348%" height="15" fill="rgb(233,208,19)" fg:x="151" fg:w="1"/><text x="80.9987%" y="302.50"></text></g><g><title>getproxies_environment (urllib/request.py:2511) (2 samples, 1.07%)</title><rect x="81.2834%" y="244" width="1.0695%" height="15" fill="rgb(216,164,2)" fg:x="152" fg:w="2"/><text x="81.5334%" y="254.50"></text></g><g><title>__init__ (httpx/_client.py:1392) (126 samples, 67.38%)</title><rect x="31.0160%" y="180" width="67.3797%" height="15" fill="rgb(220,129,5)" fg:x="58" fg:w="126"/><text x="31.2660%" y="190.50">__init__ (httpx/_client.py:1392)</text></g><g><title>_get_proxy_map (httpx/_client.py:216) (125 samples, 66.84%)</title><rect x="31.5508%" y="196" width="66.8449%" height="15" fill="rgb(242,17,10)" fg:x="59" fg:w="125"/><text x="31.8008%" y="206.50">_get_proxy_map (httpx/_client.py:216)</text></g><g><title>get_environment_proxies (httpx/_utils.py:307) (125 samples, 66.84%)</title><rect x="31.5508%" y="212" width="66.8449%" height="15" fill="rgb(242,107,0)" fg:x="59" fg:w="125"/><text x="31.8008%" y="222.50">get_environment_proxies (httpx/_utils.py:307)</text></g><g><title>getproxies (urllib/request.py:2652) (124 samples, 66.31%)</title><rect x="32.0856%" y="228" width="66.3102%" height="15" fill="rgb(251,28,31)" fg:x="60" fg:w="124"/><text x="32.3356%" y="238.50">getproxies (urllib/request.py:2652)</text></g><g><title>getproxies_macosx_sysconf (urllib/request.py:2634) (30 samples, 16.04%)</title><rect x="82.3529%" y="244" width="16.0428%" height="15" fill="rgb(233,223,10)" fg:x="154" fg:w="30"/><text x="82.6029%" y="254.50">getproxies_macosx_sysconf..</text></g><g><title>load_ssl_context (httpx/_config.py:80) (1 samples, 0.53%)</title><rect x="98.3957%" y="260" width="0.5348%" height="15" fill="rgb(215,21,27)" fg:x="184" fg:w="1"/><text x="98.6457%" y="270.50"></text></g><g><title>main (main.py:17) (181 samples, 96.79%)</title><rect x="2.6738%" y="164" width="96.7914%" height="15" fill="rgb(232,23,21)" fg:x="5" fg:w="181"/><text x="2.9238%" y="174.50">main (main.py:17)</text></g><g><title>__init__ (httpx/_client.py:1394) (2 samples, 1.07%)</title><rect x="98.3957%" y="180" width="1.0695%" height="15" fill="rgb(244,5,23)" fg:x="184" fg:w="2"/><text x="98.6457%" y="190.50"></text></g><g><title>_init_transport (httpx/_client.py:1442) (2 samples, 1.07%)</title><rect x="98.3957%" y="196" width="1.0695%" height="15" fill="rgb(226,81,46)" fg:x="184" fg:w="2"/><text x="98.6457%" y="206.50"></text></g><g><title>__init__ (httpx/_transports/default.py:261) (2 samples, 1.07%)</title><rect x="98.3957%" y="212" width="1.0695%" height="15" fill="rgb(247,70,30)" fg:x="184" fg:w="2"/><text x="98.6457%" y="222.50"></text></g><g><title>create_ssl_context (httpx/_config.py:49) (2 samples, 1.07%)</title><rect x="98.3957%" y="228" width="1.0695%" height="15" fill="rgb(212,68,19)" fg:x="184" fg:w="2"/><text x="98.6457%" y="238.50"></text></g><g><title>__init__ (httpx/_config.py:75) (2 samples, 1.07%)</title><rect x="98.3957%" y="244" width="1.0695%" height="15" fill="rgb(240,187,13)" fg:x="184" fg:w="2"/><text x="98.6457%" y="254.50"></text></g><g><title>load_ssl_context (httpx/_config.py:88) (1 samples, 0.53%)</title><rect x="98.9305%" y="260" width="0.5348%" height="15" fill="rgb(223,113,26)" fg:x="185" fg:w="1"/><text x="99.1805%" y="270.50"></text></g><g><title>all (187 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="187"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (main.py:31) (187 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="187"/><text x="0.2500%" y="78.50">&lt;module&gt; (main.py:31)</text></g><g><title>run (asyncio/runners.py:44) (187 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="187"/><text x="0.2500%" y="94.50">run (asyncio/runners.py:44)</text></g><g><title>run_until_complete (asyncio/base_events.py:633) (187 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="187"/><text x="0.2500%" y="110.50">run_until_complete (asyncio/base_events.py:633)</text></g><g><title>run_forever (asyncio/base_events.py:600) (187 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="187"/><text x="0.2500%" y="126.50">run_forever (asyncio/base_events.py:600)</text></g><g><title>_run_once (asyncio/base_events.py:1896) (184 samples, 98.40%)</title><rect x="1.6043%" y="132" width="98.3957%" height="15" fill="rgb(245,172,44)" fg:x="3" fg:w="184"/><text x="1.8543%" y="142.50">_run_once (asyncio/base_events.py:1896)</text></g><g><title>_run (asyncio/events.py:80) (184 samples, 98.40%)</title><rect x="1.6043%" y="148" width="98.3957%" height="15" fill="rgb(236,23,11)" fg:x="3" fg:w="184"/><text x="1.8543%" y="158.50">_run (asyncio/events.py:80)</text></g><g><title>main (main.py:20) (1 samples, 0.53%)</title><rect x="99.4652%" y="164" width="0.5348%" height="15" fill="rgb(205,117,38)" fg:x="186" fg:w="1"/><text x="99.7152%" y="174.50"></text></g></svg></svg>